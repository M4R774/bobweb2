name: Pull request quality gate

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  docker_lint_and_smoke_test:
    name: docker_lint_and_smoke_test
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1
        
    - name: ShellCheck
      uses: ludeeus/action-shellcheck@1.1.0

    - name: Hadolint Action
      uses: hadolint/hadolint-action@v1.6.0

    - name: Set execute permission for deploy.dev.sh
      run: chmod +x ./deploy.dev.sh

    - name: check-status
      env:
        # Actual tokens are used. This way the bot starts up as normally and
        # after startup it is checked that it is still running without crashing
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      run: |
        CONTAINER_NAME="bobweb2-bob-1"
        EXPECTED_LOG_MESSAGE="telegram.ext.Application - info - Application started"
        ./deploy.dev.sh
        sleep 30
        docker ps
        
        # Check if the container is running
        if ! docker ps --filter "name=$CONTAINER_NAME" --filter "status=running" | grep -q "$CONTAINER_NAME"; then
          echo "The container '$CONTAINER_NAME' is not running.\nLogs from the container:"
          docker logs $CONTAINER_NAME || echo "No logs found for '$CONTAINER_NAME'."
          exit 1
        fi
        
        # Check that bot application has logged that it was started
        if ! docker logs $CONTAINER_NAME | grep -q "$EXPECTED_LOG_MESSAGE"; then
          echo "Bot Application has not logged that it has started. Logs:"
          docker logs $CONTAINER_NAME
          exit 1
        fi
        
        echo "The container '$CONTAINER_NAME' is running and everything looks good! :-)"


  tests_and_sonar:
    name: tests_and_sonar
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}

    - name: Set up ffmpeg
      uses: FedericoCarboni/setup-ffmpeg@v2

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade --upgrade-strategy eager -r requirements.txt
        
    - name: Test migration script
      run: |
        coverage run -m unittest discover bobweb/utilities
        coverage xml -i
        sed -i 's/\/home\/runner\/work\/bobweb2\/bobweb2\//\/github\/workspace\//g' coverage.xml
        
    - name: Check for migrations
      run: |
        python bobweb/utilities/check_for_new_migrations.py

    - name: Run unit tests
      env:
        BOT_TOKEN: "DUMMY_TOKEN"
        DJANGO_SECRET_KEY: "DUMMY_SECRET"
      run: |
        python bobweb/web/manage.py migrate
        coverage run -m unittest discover bobweb/bob
        coverage xml -i
        echo "This sed will change the filepaths from coverage report to"
        echo "absolute paths so that sonar will find them"
        sed -i 's/\/home\/runner\/work\/bobweb2\/bobweb2\//\/github\/workspace\//g' coverage.xml
        coverage run bobweb/web/manage.py test --noinput
        coverage xml -i
        sed -i 's/\/home\/runner\/work\/bobweb2\/bobweb2\//\/github\/workspace\//g' coverage.xml

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
